// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  category    String
  isCanceled  Boolean  @default(false)
  city        String?
  venue       String?
  latitude    Float
  longitude   Float
  date        DateTime

  // Host information (direct reference)
  hostId String
  host   User   @relation("HostedActivities", fields: [hostId], references: [id])

  attendees ActivityAttendee[]
  comments  Comment[]

  @@index([hostId])
  @@index([date])
  @@index([category])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String  @unique
  password    String
  displayName String
  username    String  @unique
  imageUrl    String? @default("https://img.freepik.com/free-psd/3d-render-avatar-character_23-2150611731.jpg?semt=ais_hybrid")

  // User can host multiple activities
  hostedActivities Activity[] @relation("HostedActivities")

  // User can attend multiple activities
  activities ActivityAttendee[]

  // User can have multiple photos
  photos Photo[]

  following UserFollowings[] @relation("Following")
  followers UserFollowings[] @relation("Followers")
  comments  Comment[]

  @@index([username])
}

model ActivityAttendee {
  // Composite primary key
  userId     String
  activityId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user     User     @relation(fields: [userId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])

  // Additional fields
  isHost Boolean @default(false)

  @@id([userId, activityId])
}

model Photo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url      String
  isMain   Boolean @default(false)
  publicId String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserFollowings {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followerId  String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id])
}
